@model ScavengeRUs.Models.Entities.Location

@{
    ViewData["Title"] = "Create";
}

@*The QR Code generated by this website is currently not able to be viewed in the database, it also needs
  to be displayed on the edit, details, and delete pages, it is listed in the views as an image, but does
  not display due to it not having a valid string. The QR codes also do not complete tasks. Also add functionality
  that prevents users from creating a QR code BEFORE filling in the place, lat, lon, and task details fields.
*@
<script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>
<h3>Create new task</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Place" class="control-label"></label>
                <input asp-for="Place" class="form-control" />
                <span asp-validation-for="Place" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Task" class="control-label"></label>
                <textarea asp-for="Task" class="form-control"></textarea>
                <span asp-validation-for="Task" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Lat" class="control-label"></label>
                <input asp-for="Lat" class="form-control" />
                <span asp-validation-for="Lat" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Lon" class="control-label"></label>
                <input asp-for="Lon" class="form-control" />
                <span asp-validation-for="Lon" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="QRCode" class="control-label"></label>
                <button type="button" id="generateBtn" class="btn-primary">Generate QR Code+Text</button>
                <div id="qrcode"></div>
                <label asp-for="QRCodeText" class="control-label"></label>
                <div id="qrCodeText"></div>
                <input asp-for="QRCode" type="hidden" name="QRCode" value="QRCode" />
                <span asp-validation-for="QRCode" class="text-danger"></span>
                <input asp-for="QRCodeText" type="text" name="QRCodeText" readonly="readonly"/>
                <span asp-validation-for="QRCodeText" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Answer" class="control-label"></label>
                <input asp-for="Answer" class="form-control" />
                <span asp-validation-for="Answer" class="text-danger"></span>
            </div>
            <label class="form-label" for="customFile">Image</label>
            <input type="file" class="form-control" id="customFile" />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary mt-3" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        //Prevents generate QR code button from submitting the fields.
        event.preventDefault();
        var generateBtn = document.getElementById('generateBtn');
        var qrcodeDiv = document.getElementById('qrcode');
        var qrCodeInput = document.querySelector('[name="QRCode"]');

        // Initialize QR code instance
        var qrcode = new QRCode(qrcodeDiv, {
            width: 128,
            height: 128
        });

        generateBtn.addEventListener('click', function () {
            // To create a unique QR code, the place, task, latitude, and longitude are used.
            var newTask = {
                Place: document.getElementById('Place').value,
                Task: document.getElementById('Task').value,
                Lat: document.getElementById('Lat').value,
                Lon: document.getElementById('Lon').value,
            };
            // Generates alternative "QR Code Text", this has no real connection other than both sharing
            // the same generation button.
            let qrCodeText = " ";
            // To remove the possibility of vulgar text, vowels are not able to be generated.
            const characters = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789";
            const charactersLength = characters.length;
            let counter = 0;
            while (counter < 8) {
                qrCodeText += characters.charAt(Math.floor(Math.random() * charactersLength));
                counter += 1;
            }

            //This sets the QR Code Text to the generated text.
            document.getElementById('QRCodeText').value = qrCodeText;
            
            // Generates QR code for the task
            generateQRCode(newTask);
        });

        function generateQRCode(task) {
            // If a new QR code is created, this clears the original so they do not stack.
            qrcode.clear();
            qrcode.makeCode(JSON.stringify(task));
            var qrCodeImage = qrcodeDiv.querySelector('img');
            var base64Image = qrCodeImage.src.split(';base64,')[1];
            document.getElementById('QRCode').value = base64Image;
        }


    });
</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}